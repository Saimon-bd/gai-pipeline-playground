name: Auto Trigger Terraform CD

on:
  workflow_call:
    secrets:
      github-token:
        required: false
      azure-credentials-env:
        required: false
      azure-credentials-adb2c:
        required: false
      azure-shared-subscription-id:
        required: false
    inputs:
      team:
        required: true
        type: string
      environment:
        required: true
        type: string
      environments:
        required: true
        type: string
      paths:
        required: true
        type: string
      terraform-version:
        required: true
        type: string
      test-mode:
        description: 'Enable test mode (plan only, no apply)'
        required: false
        type: boolean
        default: false

jobs:
  terraform-plan:
    name: Plan ${{ matrix.env }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJson(inputs.environments) }}
      fail-fast: false
    
    env:
      TF_VAR_AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}
      AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}
    
    defaults:
      run:
        shell: bash
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Mock Setup Terraform
        run: |
          echo "🔧 Mock: Setting up Terraform ${{ inputs.terraform-version }}"
          echo "✅ Mock: Terraform setup completed"

      - name: Process Paths for Environment
        id: process-paths
        run: |
          # Filter paths for current matrix environment
          paths='${{ inputs.paths }}'
          filtered_paths=$(echo "$paths" | jq -r --arg env "${{ matrix.env }}" '.[] | select(startswith($env + "/"))')
          
          # Convert to compact JSON array (single line)
          if [ -n "$filtered_paths" ]; then
            json_array=$(echo "$filtered_paths" | jq -R . | jq -s -c .)
          else
            json_array="[]"
          fi
          
          echo "env-paths=$json_array" >> $GITHUB_OUTPUT
          echo "Filtered paths for ${{ matrix.env }}: $json_array"

      - name: Mock Environment Setup
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          echo "🔧 Mock: Setting up environment variables for ${{ matrix.env }}"
          echo "🔧 Mock: Configuring git authentication"

      - name: Mock Terraform Plan for Environment Paths
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          paths='${{ steps.process-paths.outputs.env-paths }}'
          echo "$paths" | jq -r '.[]' | while read path; do
            echo "🚀 Mock Processing path: $path"
            echo "✅ Mock Terraform Plan completed successfully for: $path"
            echo "📊 Mock Resources to create: 3, update: 1, destroy: 0"
          done

      # Upload plan artifacts for each path
      - name: Upload Plan Artifacts
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          paths='${{ steps.process-paths.outputs.env-paths }}'
          echo "$paths" | jq -r '.[]' | while read path; do
            if [ -f "environments/$path/tfplan" ]; then
              service_name=$(echo "$path" | sed 's/\//-/g')
              echo "Uploading artifact for: tfplan-${{ inputs.team }}-$service_name-${{ github.run_number }}"
            fi
          done

  approval-notification:
    name: Notify Approval Required
    needs: [terraform-plan]
    if: needs.terraform-plan.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJson(inputs.environments) }}
      fail-fast: false
    
    steps:
      - name: Process Paths for Environment
        id: process-paths
        run: |
          paths='${{ inputs.paths }}'
          filtered_paths=$(echo "$paths" | jq -r --arg env "${{ matrix.env }}" '.[] | select(startswith($env + "/"))')
          
          # Get file list for notification (single line)
          file_list=""
          if [ -n "$filtered_paths" ]; then
            file_list=$(echo "$filtered_paths" | tr '\n' ', ' | sed 's/, $//' | tr -d '\r')
          fi
          
          echo "files=$file_list" >> $GITHUB_OUTPUT
          echo "Files for ${{ matrix.env }}: $file_list"

      - name: Get Slack Webhook for Environment
        id: slack-webhook
        run: |
          case "${{ matrix.env }}" in
            "dev")
              echo "webhook=${{ secrets.SLACK_WEBHOOK_URL_DEV }}" >> $GITHUB_OUTPUT
              ;;
            "stg")
              echo "webhook=${{ secrets.SLACK_WEBHOOK_URL_STG }}" >> $GITHUB_OUTPUT
              ;;
            "prd")
              echo "webhook=${{ secrets.SLACK_WEBHOOK_URL_PRD }}" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "webhook=" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Send Approval Waiting Notification
        if: steps.slack-webhook.outputs.webhook != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"#ff9500\",
                \"title\": \"⏳ Waiting for APIM Apply Approval\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ matrix.env }}\", \"short\": true},
                  {\"title\": \"Repository\", \"value\": \"${{ github.repository }}\", \"short\": true},
                  {\"title\": \"Triggered by\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Files\", \"value\": \"${{ steps.process-paths.outputs.files }}\", \"short\": false}
                ],
                \"actions\": [{
                  \"type\": \"button\",
                  \"text\": \"🚀 Approve Deployment\",
                  \"url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                }]
              }]
            }" \
            "${{ steps.slack-webhook.outputs.webhook }}"

  terraform-apply:
    name: Apply ${{ matrix.env }}
    runs-on: ubuntu-latest
    needs: [terraform-plan]
    if: needs.terraform-plan.result == 'success' && inputs.test-mode != true
    environment: ${{ matrix.env }}
    strategy:
      matrix:
        env: ${{ fromJson(inputs.environments) }}
      fail-fast: false
    
    env:
      TF_VAR_AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}
      AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}
    
    defaults:
      run:
        shell: bash
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Mock Setup Terraform
        run: |
          echo "🔧 Mock: Setting up Terraform ${{ inputs.terraform-version }}"
          echo "✅ Mock: Terraform setup completed"

      - name: Set Environment Variables
        uses: ./.github/workflows/azure-spn-secret-env
        with:
          creds-env: ${{ secrets.azure-credentials-env }}
          creds-adb2c: ${{ secrets.azure-credentials-adb2c }}
          environment: ${{ matrix.env }}

      - name: Configure git token
        run: git config --global url."https://${{ secrets.github-token }}:@github.com/drivegreenlane/".insteadOf "https://github.com/drivegreenlane/"\

      - name: Process Paths for Environment
        id: process-paths
        run: |
          paths='${{ inputs.paths }}'
          filtered_paths=$(echo "$paths" | jq -r --arg env "${{ matrix.env }}" '.[] | select(startswith($env + "/"))')
          
          # Convert to compact JSON array (single line)
          if [ -n "$filtered_paths" ]; then
            json_array=$(echo "$filtered_paths" | jq -R . | jq -s -c .)
          else
            json_array="[]"
          fi
          
          echo "env-paths=$json_array" >> $GITHUB_OUTPUT
          echo "Apply paths for ${{ matrix.env }}: $json_array"

      - name: Mock Terraform Apply for Environment Paths
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          paths='${{ steps.process-paths.outputs.env-paths }}'
          echo "$paths" | jq -r '.[]' | while read path; do
            echo "🚀 Mock Applying Terraform for path: $path"
            echo "✅ Mock Terraform Apply completed successfully for: $path"
            echo "📊 Mock Resources applied: 3 created, 1 updated, 0 destroyed"
            echo "🎉 Mock Infrastructure deployment completed for: $path"
          done

      - name: Mock Upload TrustFramework Policy
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          paths='${{ steps.process-paths.outputs.env-paths }}'
          echo "$paths" | jq -r '.[]' | while read path; do
            if [[ "$path" == *"customer-service/ad-b2c"* ]]; then
              echo "📋 Mock: Uploading TrustFramework Policy for: $path"
              echo "✅ Mock: B2C Policy uploaded successfully"
            fi
          done

