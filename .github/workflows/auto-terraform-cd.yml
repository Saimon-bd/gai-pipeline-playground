name: Auto Trigger Terraform CD

on:
  workflow_call:
    secrets:
      github-token:
        required: false
      azure-credentials-env:
        required: false
      azure-credentials-adb2c:
        required: false
      azure-shared-subscription-id:
        required: false
      # ‚úÖ Slack webhook secrets
      SLACK_WEBHOOK_URL_DEV:
        required: false
      SLACK_WEBHOOK_URL_STG:
        required: false
      SLACK_WEBHOOK_URL_PRD:
        required: false
    inputs:
      team:
        required: true
        type: string
      environment:
        required: true
        type: string
      environments:
        required: true
        type: string
      paths:
        required: true
        type: string
      terraform-version:
        required: true
        type: string
      test-mode:
        description: 'Enable test mode (plan only, no apply)'
        required: false
        type: boolean
        default: false

jobs:
  terraform-plan:
    name: Plan ${{ matrix.env }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJson(inputs.environments) }}
      fail-fast: false
    env:
      TF_VAR_AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}
      AZ_SHARED_SUBSCRIPTION_ID: ${{ secrets.azure-shared-subscription-id }}

    steps:
      - uses: actions/checkout@v4
      - name: Mock Setup Terraform
        run: |
          echo "üîß Setting up Terraform ${{ inputs.terraform-version }}"
          echo "‚úÖ Terraform setup completed"

      - name: Process Paths
        id: process-paths
        run: |
          paths='${{ inputs.paths }}'
          filtered_paths=$(echo "$paths" | jq -r --arg env "${{ matrix.env }}" '.[] | select(startswith($env + "/"))')
          if [ -n "$filtered_paths" ]; then
            json_array=$(echo "$filtered_paths" | jq -R . | jq -s -c .)
          else
            json_array="[]"
          fi
          echo "env-paths=$json_array" >> $GITHUB_OUTPUT
          echo "Paths for ${{ matrix.env }}: $json_array"

      - name: Mock Plan
        if: steps.process-paths.outputs.env-paths != '[]'
        run: |
          echo "üöÄ Mock Terraform Plan for ${{ matrix.env }}"
          echo "‚úÖ Mock plan done."

  approval-notification:
    name: Notify Approval Required
    needs: [terraform-plan]
    if: needs.terraform-plan.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJson(inputs.environments) }}
      fail-fast: false
    env:
      SLACK_WEBHOOK_URL_DEV: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}
      SLACK_WEBHOOK_URL_STG: ${{ secrets.SLACK_WEBHOOK_URL_STG }}
      SLACK_WEBHOOK_URL_PRD: ${{ secrets.SLACK_WEBHOOK_URL_PRD }}

    steps:
      - name: Process Paths for Environment
        id: process-paths
        run: |
          paths='${{ inputs.paths }}'
          filtered_paths=$(echo "$paths" | jq -r --arg env "${{ matrix.env }}" '.[] | select(startswith($env + "/"))')
          file_list=$(echo "$filtered_paths" | tr '\n' ', ' | sed 's/, $//' | tr -d '\r')
          echo "files=$file_list" >> $GITHUB_OUTPUT

      - name: Get Slack Webhook for Environment
        id: slack-webhook
        run: |
          case "${{ matrix.env }}" in
            "dev") WEBHOOK_URL="$SLACK_WEBHOOK_URL_DEV" ;;
            "stg") WEBHOOK_URL="$SLACK_WEBHOOK_URL_STG" ;;
            "prd") WEBHOOK_URL="$SLACK_WEBHOOK_URL_PRD" ;;
            *) WEBHOOK_URL="" ;;
          esac

          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ùå No webhook found for env: ${{ matrix.env }}"
          else
            echo "‚úÖ Webhook found for ${{ matrix.env }} (${#WEBHOOK_URL} chars)"
          fi
          echo "webhook=$WEBHOOK_URL" >> $GITHUB_OUTPUT

      - name: Send Slack Notification
        if: steps.slack-webhook.outputs.webhook != ''
        run: |
          payload=$(jq -n \
            --arg env "${{ matrix.env }}" \
            --arg repo "${{ github.repository }}" \
            --arg actor "${{ github.actor }}" \
            --arg files "${{ steps.process-paths.outputs.files }}" \
            --arg url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              attachments: [
                {
                  color: "#ff9500",
                  title: "‚è≥ Waiting for APIM Apply Approval",
                  fields: [
                    {title: "Environment", value: $env, short: true},
                    {title: "Repository", value: $repo, short: true},
                    {title: "Triggered by", value: $actor, short: true},
                    {title: "Files", value: $files, short: false}
                  ],
                  actions: [
                    {type: "button", text: "üöÄ Approve Deployment", url: $url}
                  ]
                }
              ]
            }')
          echo "$payload" | jq '.'
          curl -X POST -H 'Content-type: application/json' -d "$payload" \
            "${{ steps.slack-webhook.outputs.webhook }}"

  terraform-apply:
    name: Apply ${{ matrix.env }}
    needs: [terraform-plan]
    if: needs.terraform-plan.result == 'success' && inputs.test-mode != true
    runs-on: ubuntu-latest
    strategy:
      matrix:
